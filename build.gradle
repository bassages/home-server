plugins {
    id 'org.springframework.boot' version '1.5.10.RELEASE'
    id 'com.moowork.gulp' version '1.2.0'
    id 'com.github.ksoichiro.build.info' version '0.2.0'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'jacoco'
    id "org.sonarqube" version '2.6.1'
    id 'net.ltgt.apt' version '0.10'
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.junit.reportsPath", "build/test-results"
        property "sonar.jacoco.reportPath", "build/test-reports/jacoco.exec"

        // Exclude development utils
        property "sonar.coverage.exclusions", "**/dev/**/*.java"
    }
}

if (!project.hasProperty("buildtype")) {
    ext.buildtype = 'dev'
}

buildInfo {
    // Date format string used to Git committer date.
    committerDateFormat "yyyy-MM-dd'T'HH:mm:ssZ"

    // Date format string used to build date.
    buildDateFormat "yyyy-MM-dd'T'HH:mm:ssZ"
}

repositories {
    jcenter()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5'
}

node {
    // Version of node to use.
    version = '8.9.4' // LTS version
    download = true
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

version = '1.0.0'

springBoot  {
    // Generates a build-info.properties file
    buildInfo()
}

jar {
    baseName = 'home-server'
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.16.20'
    apt "org.projectlombok:lombok:1.16.20"

    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')

    // Needed to make the actuator hypermedia-based “discovery page” for the other endpoints work
    compile('org.springframework.boot:spring-boot-starter-hateoas')

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-tomcat')
    compile('org.springframework.boot:spring-boot-devtools')

    compile('net.sf.ehcache:ehcache')
    compile('commons-io:commons-io:2.6')
    compile('org.apache.commons:commons-collections4:4.1')
    compile('org.apache.commons:commons-lang3:3.7')
    compile('org.apache.httpcomponents:httpclient:4.5.5')
    compile('org.apache.commons:commons-math3:3.6.1')
    compile('javax.inject:javax.inject:1')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.assertj:assertj-core:3.9.0')

    runtime('com.h2database:h2')
    runtime('org.hibernate:hibernate-java8')
    runtime('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
}

// Take over system properties.
// Needed to be able to set the active profile for Spring Boot.
// e.g. -Dspring.profiles.active=development-h2db
bootRun {
    systemProperties System.properties
}

// make sure gulp generates artifacts for the build
bootRun.dependsOn 'buildGulpFromGradle'
processResources.dependsOn 'buildGulpFromGradle'

// Cleans up node_modules and nodejs dirs on clean task
clean.doFirst {
    delete "${rootDir}/node_modules"
    delete "${rootDir}/.gradle/nodejs"
}

task buildGulpFromGradle(type: GulpTask) {
    description = 'Triggers the Gulp build. Adding -Pbuildtype=prod to the gradle command will build frontend resources minified and uglified.'

    // Force npmInstall to run (for some reason it won't run after the first clean build, it reports UP-TO-DATE)
    npmInstall.outputs.upToDateWhen { false }

    // make sure npm install has been performed before calling the build task in gulpfile.js
    dependsOn = [ npmInstall ]

    args = ['build', "--buildtype=${project.buildtype}" ]

    // limit memory usage
    options = ['--max-old-space-size=512']
}

