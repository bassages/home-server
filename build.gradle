plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.ben-manes.versions' version '0.44.0'
    id 'jacoco'
    id "org.sonarqube" version '3.5.0.2730'
}

def homeFrontendVersion = '1.12.0'

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.junit.reportsPath", "build/test-results"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.organization", "bassages-github"
        property "sonar.projectKey", "home-server"
    }
}

repositories {
    mavenCentral()
}

java {
    toolchain{
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
}

if (System.getenv("GITHUB_TAG") != null) {
    version = System.getenv("GITHUB_TAG")
    logger.info('Creating release from GitHub action workflow. Version: ' + version)
} else {
    version = 'x.x.x'
}

jar {
    //noinspection GroovyAssignabilityCheck
    archiveBaseName = 'home-server'
}

dependencies {
    annotationProcessor('org.projectlombok:lombok:1.18.24')
    compileOnly('org.projectlombok:lombok:1.18.24')

    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-websocket')

    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-tomcat')
    compileOnly('org.springframework.boot:spring-boot-devtools')

    implementation('org.ehcache:ehcache:3.10.8')
    implementation('commons-io:commons-io:2.11.0')
    implementation('org.apache.commons:commons-collections4:4.4')
    implementation('org.apache.commons:commons-lang3:3.12.0')
    implementation('org.apache.httpcomponents:httpclient:4.5.13')
    implementation('org.apache.commons:commons-math3:3.6.1')
    implementation('javax.inject:javax.inject:1')
    implementation('com.google.code.findbugs:jsr305:3.0.2')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('org.assertj:assertj-core:3.23.1')
    testImplementation('nl.jqno.equalsverifier:equalsverifier:3.12')
    testImplementation('org.awaitility:awaitility:4.2.0')

    runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")
    runtimeOnly('org.flywaydb:flyway-core')
    runtimeOnly('com.h2database:h2')
}

// Spring Boot Actuator’s info endpoint automatically publishes information about your build
// in the presence of a META-INF/build-info.properties file.
// A BuildInfo task is provided to generate this file.
// The easiest way to use the task is via the plugin’s DSL,
// like has been done here:
springBoot {
    buildInfo()
}

// Take over system properties.
// Needed to be able to set the active profile for Spring Boot.
// e.g. -Dspring.profiles.active=development-h2db
bootRun {
    systemProperties System.properties
}

processResources.doLast {
    println '-----------------------------------------------------------------------------------'
    println 'Download frontend release zip'
    ant.get(src: "https://github.com/bassages/home-frontend/releases/download/${homeFrontendVersion}/home-frontend.zip", dest: 'build')

    println 'Unzip frontend release artifact to be included in static resources of backend artifact'
    ant.unzip(src: 'build/home-frontend.zip', dest: 'build/resources/main/static')
    println '-----------------------------------------------------------------------------------'
}
