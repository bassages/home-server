plugins {
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id "com.moowork.gulp" version "1.1.1"
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
}


if (!project.hasProperty("buildtype")) {
    ext.buildtype = 'dev'
}

repositories {
    jcenter()
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

node {
    // Version of node to use.
    version = '6.9.5'
    download = true
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

version = '1.0.0'

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mm:ss"
    dateFormatTimeZone = "CET"
}

jar {
    baseName = 'home-server'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-websocket")

    // Needed to make the actuator hypermedia-based “discovery page” for the other endpoints work
    compile("org.springframework.boot:spring-boot-starter-hateoas")

    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-actuator-docs")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.springframework.boot:spring-boot-devtools")

    compile("net.sf.ehcache:ehcache")
    compile("javax.el:javax.el-api:2.2.4")
    compile("commons-io:commons-io:2.5")
    compile("commons-collections:commons-collections:3.2.2")
    compile("org.apache.commons:commons-lang3:3.5")
    compile("org.apache.httpcomponents:httpclient:4.5.2")
    compile("org.webjars:sockjs-client:1.0.2")
    compile("org.webjars:stomp-websocket:2.3.3")
    testCompile("org.assertj:assertj-core:3.6.2")

    testCompile("org.springframework.boot:spring-boot-starter-test")

    runtime("com.h2database:h2")
    runtime("mysql:mysql-connector-java")
}

// Take over system properties.
// Needed to be able to set the active profile for Spring Boot.
// e.g. -Dspring.profiles.active=development-h2db
bootRun {
    systemProperties System.properties
}

// make sure gulp generates artifacts for the build
bootRun.dependsOn 'buildGulpFromGradle'
processResources.dependsOn 'buildGulpFromGradle'

// Cleans up node_modules and nodejs dirs on clean task
clean.doFirst {
    delete "${rootDir}/node_modules"
    delete "${rootDir}/.gradle/nodejs"
}

task buildGulpFromGradle(type: GulpTask) {
    description = "Triggers the Gulp build. Adding -Pbuildtype=prod to the gradle command will build frontend resources minified and uglified."

    // Force npmInstall to run (for some reason it won't run after the first clean build, it reports UP-TO-DATE)
    npmInstall.outputs.upToDateWhen { false }

    // make sure npm install has been performed before calling the build task in gulpfile.js
    dependsOn = [ npmInstall ]

    args = ['build', "--buildtype=${project.buildtype}" ]
}

