plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.github.ben-manes.versions' version '0.22.0'
    id 'jacoco'
    id "org.sonarqube" version '2.8'
}

jacoco {
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.junit.reportsPath", "build/test-results"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

repositories {
    jcenter()
}

java {
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
}

compileJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
    options.encoding = 'UTF-8'
}

if (System.getenv("TRAVIS_TAG") != null) {
    version = System.getenv("TRAVIS_TAG")
} else {
    version = 'x.x.x'
}

jar {
    archiveBaseName = 'home-server'
}

dependencies {
    annotationProcessor('org.projectlombok:lombok:1.18.12')
    compileOnly('org.projectlombok:lombok:1.18.12')

    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-tomcat')
    compile('org.springframework.boot:spring-boot-devtools')

    compile('net.sf.ehcache:ehcache')
    compile('commons-io:commons-io:2.6')
    compile('org.apache.commons:commons-collections4:4.4')
    compile('org.apache.commons:commons-lang3:3.10')
    compile('org.apache.httpcomponents:httpclient:4.5.12')
    compile('org.apache.commons:commons-math3:3.6.1')
    compile('javax.inject:javax.inject:1')
    compile('javax.xml.bind:jaxb-api:2.3.0')
    compile('com.google.code.findbugs:jsr305:3.0.2')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    testCompile('org.assertj:assertj-core:3.15.0')
    testCompile('nl.jqno.equalsverifier:equalsverifier:3.1.13')

    runtime('com.h2database:h2')
    runtime('org.hibernate:hibernate-java8')
    runtime('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
}

springBoot {
    buildInfo()
}

// Take over system properties.
// Needed to be able to set the active profile for Spring Boot.
// e.g. -Dspring.profiles.active=development-h2db
bootRun {
    systemProperties System.properties
}

def recursive = false
processResources.dependsOn getRootProject().project('home-server-frontend')
                                           .getTasksByName('buildAngularApplication', recursive)[0]
processResources.doLast {
    def frontendArtifacts = '../home-server-frontend/dist'
    def resourcesDirectory = 'build/resources/main/static'

    println '-----------------------------------------------------------------------------------'
    println 'Copy front-end artifacts'
    println 'From: [' + frontendArtifacts + '] To: [' + resourcesDirectory + ']'
    println '-----------------------------------------------------------------------------------'

    copy {
        from frontendArtifacts
        into resourcesDirectory
    }
}

test {
    exclude '**/*IntegrationTest.*'
}
